<div class="container">
    <div class="row">
        <div class="col-sm">
            <input id="groupId" type="hidden" value="{{groupid}}">
            <div id="song-name"></div>
            <div id="song-title"></div>
            <img src="" id="song-image" alt="">
            <div id="playList" class="text-center">
                <audio controls id="audioPlayer" preload="auto" type="audio/mpeg" style=""></audio>
                <br>
                <button id="playBtn" value="notSynched" type="button" class="btn btn-primary btn-succes btn-lg">
                    <svg class="bi bi-shuffle" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M12.646 1.146a.5.5 0 0 1 .708 0l2.5 2.5a.5.5 0 0 1 0 .708l-2.5 2.5a.5.5 0 0 1-.708-.708L14.793 4l-2.147-2.146a.5.5 0 0 1 0-.708zm0 8a.5.5 0 0 1 .708 0l2.5 2.5a.5.5 0 0 1 0 .708l-2.5 2.5a.5.5 0 0 1-.708-.708L14.793 12l-2.147-2.146a.5.5 0 0 1 0-.708z"/>
                        <path fill-rule="evenodd" d="M0 4a.5.5 0 0 1 .5-.5h2c3.053 0 4.564 2.258 5.856 4.226l.08.123c.636.97 1.224 1.865 1.932 2.539.718.682 1.538 1.112 2.632 1.112h2a.5.5 0 0 1 0 1h-2c-1.406 0-2.461-.57-3.321-1.388-.795-.755-1.441-1.742-2.055-2.679l-.105-.159C6.186 6.242 4.947 4.5 2.5 4.5h-2A.5.5 0 0 1 0 4z"/>
                        <path fill-rule="evenodd" d="M0 12a.5.5 0 0 0 .5.5h2c3.053 0 4.564-2.258 5.856-4.226l.08-.123c.636-.97 1.224-1.865 1.932-2.539C11.086 4.93 11.906 4.5 13 4.5h2a.5.5 0 0 0 0-1h-2c-1.406 0-2.461.57-3.321 1.388-.795.755-1.441 1.742-2.055 2.679l-.105.159C6.186 9.758 4.947 11.5 2.5 11.5h-2a.5.5 0 0 0-.5.5z"/>
                    </svg>
                    Synchronize
                </button>
                <button onclick="stopSong()" class="btn btn-primary btn-danger btn-lg">
                    <svg class="bi bi-stop-fill" width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path d="M5 3.5h6A1.5 1.5 0 0 1 12.5 5v6a1.5 1.5 0 0 1-1.5 1.5H5A1.5 1.5 0 0 1 3.5 11V5A1.5 1.5 0 0 1 5 3.5z"/>
                    </svg>
                    Stop playing
                </button>
            </div>
            <br>
            <div class="card">
                <div class="card-body">
                    <p>Volume</p>
                    <input type="range" id="volume" min="0" max="1" value="0.5" step="0.01" onclick="changeVolume()">
                    <br>
                    <p>Process</p>
                    <input type="range" id="progress" min="0" max="100" value="0" step="0.01" onclick="changeProgress()">
                    <br>
                    <p>Pitch</p>
                    <input type="range" id="pitch" min="0.7" max="1.5" step="0.01" onclick="changePitch()">
                    <p id="pitchText"></p>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.dev.js"></script>
<script type="application/javascript">

    const socket = io.connect(window.location.protocol + '//' + window.location.host);

    let audioPlayer = document.getElementById('audioPlayer'),
            pitchControl = document.getElementById('pitch'),
            progressControl = document.getElementById('progress'),
            isMusicPlaying = false,
            playBtn = $('#playBtn'),
            groupId = $("#groupId").val();

    $('#playBtn').click(function () {
        playBtn.val('Synched')
        socket.emit('startStream', groupId)
    });

    // SOCKET EVENT LISTENERS
    socket.on('connect', function() {
        const sessionID = socket.id;
        let groupSession = {
            "groupId": groupId,
            "socketId": sessionID,
        }
        socket.emit('startTrainingSession', groupSession);
    });

    socket.on('streamMusic', function (data) {
        if(playBtn.val() != 'notSynched' ) {
            playMusic(data.src, data.name, data.time_stamp, data.pitch);
        }
    });

    socket.on('musicSessionAlive', function (data) {
        if (data != true) {
            stopSong()
        }
    });

    socket.on('stopMusicStream', function (data) {
        alert('Instructor closed the session');
        stopSong()
    });

    socket.on('changePlaybackTime', function (playbackTime) {
        changeProgress(playbackTime)
    });

    socket.on('changePitch', function (pitch) {
        changePitch(pitch)
        updatePitch(pitch)
    });

    socket.on('noSessionFound', function () {
        alert('No active session for this group');
    });

    function updatePitch(pitch = null) {
        pitchControl.value = audioPlayer.playbackRate
        pitchControl.textContent = (pitch.value * 100).toFixed(0) + " %"
    }

    function changePitch(pitch = null) {
        audioPlayer.playbackRate = (pitch ? pitch : pitchControl.value)
    }

    function changeProgress(playbackTime = null) {
        audioPlayer.currentTime = (playbackTime ? playbackTime : progressControl.value)
    }

    function playMusic(src, name, time_stamp, pitch) {
        const musicPlayer = $("#audioPlayer");
        if (audioPlayer.src != src) {
            musicPlayer.attr('src', src);
        }
        musicPlayer.attr('time_stamp', time_stamp);
        musicPlayer.attr('pitch', pitch);
        audioPlayer.play()
    }

    function stopSong() {
        audioPlayer.pause();
        audioPlayer.currentTime = 0;
    };

    /* Adds Play and Pause button */
    var playing = true
    function playPause() {
        const pp = document.querySelector('#play-pause'),
                song = audioPlayer
        if (playing) {
            pp.textContent = "Pause"
            song.play()
            playing = false
        } else {
            pp.innerHTML = "Play"
            song.pause()
            playing = true
        }
    }

    /* Update and Change audio progress. Adds audio progress controls */
    function updateProgress(playbackTime) {
        const progress = document.querySelector('#progress')
        progress.max = audioPlayer.duration
        progress.value = audioPlayer.currentTime
    }

    setInterval(updateProgress, 1000)

    /* Update and Change volume. Adds volume controls */
    function updateVolume() {
        const volume = document.querySelector('#volume')
        volume.value = audioPlayer.volume
    }

    setInterval(updateVolume, 1000)

    function changeVolume() {
        const song = audioPlayer
        song.volume = document.querySelector('#volume').value
    }
</script>
